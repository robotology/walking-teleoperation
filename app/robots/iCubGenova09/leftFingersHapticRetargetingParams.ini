###############
### ROBOT
###############
remote_control_boards   ("left_arm")

remote_sensor_boards    "left_hand"

axis_list             ( "l_thumb_oppose", "l_thumb_proximal", "l_thumb_distal", "l_index_proximal", "l_index_distal", "l_middle_proximal", "l_middle_distal", "l_pinky" )

all_axis_list         ( "l_hand_finger", "l_thumb_oppose", "l_thumb_proximal", "l_thumb_distal", "l_index_proximal", "l_index_distal", "l_middle_proximal", "l_middle_distal", "l_pinky" )

joint_list                   (  "l_thumb_oppose", "l_thumb_proximal", "l_thumb_middle", "l_thumb_distal",
                                "l_index_abduction", "l_index_proximal", "l_index_middle", "l_index_distal",
                                "l_middle_proximal", "l_middle_middle", "l_middle_distal",
                                "l_ring_abduction", "l_ring_proximal",   "l_ring_middle",   "l_ring_distal",
                                "l_pinky_abduction", "l_pinky_proximal",   "l_pinky_middle",   "l_pinky_distal" )

# the custom range of axes motion [degrees]
#                                    axis-name ,   min value,     max value
# axes_custom_motion_range  (   ( ${AXES_NAME} ,      ${MIN},        ${MAX}) )

# the custom axes home angle value [degrees]
# By default it home values are set to min axis values
#                                  axis-name ,  axis value
# axes_custom_home_angle  (   ( ${AXES_NAME} ,      ${VAL}) )

# if a joint is not listed here, the sensory information is of encoder type.
# notice that "l_thumb_oppose" and "l_hand_fingers" is measured by joint encoders not the analog sensors
analog_list           (  "l_thumb_proximal", "l_thumb_middle", "l_thumb_distal",
                         "l_index_proximal", "l_index_middle", "l_index_distal",
                         "l_middle_proximal", "l_middle_middle", "l_middle_distal",
                         "l_ring_proximal",   "l_ring_middle",   "l_ring_distal",
                         "l_pinky_proximal",   "l_pinky_middle",   "l_pinky_distal" )

#Adding the groups of each axis and associated joints
l_hand_finger          ( "l_index_abduction", "l_ring_abduction", "l_pinky_abduction" )
l_thumb_oppose         ( "l_thumb_oppose" )
l_thumb_proximal       ( "l_thumb_proximal" )
l_thumb_distal         ( "l_thumb_middle", "l_thumb_distal"  )
l_index_proximal       ( "l_index_proximal" )
l_index_distal         (  "l_index_middle", "l_index_distal" )
l_middle_proximal      (  "l_middle_proximal" )
l_middle_distal        ( "l_middle_middle", "l_middle_distal" )
l_pinky                ( "l_ring_proximal",   "l_ring_middle",   "l_ring_distal", "l_pinky_proximal",   "l_pinky_middle",   "l_pinky_distal" )

robot_finger_list ( "l_thumb_finger", "l_index_finger", "l_middle_finger", "l_ring_finger", "l_little_finger")

###############
### HUMAN
###############
human_joint_list      ( "l_thumb_oppose",     "l_thumb_proximal",   "l_thumb_middle",  "l_thumb_distal",
                        "l_index_abduction",  "l_index_proximal",   "l_index_middle",  "l_index_distal",
                        "l_middle_abduction", "l_middle_proximal",  "l_middle_middle", "l_middle_distal",
                        "l_ring_abduction",   "l_ring_proximal",    "l_ring_middle",   "l_ring_distal",
                        "l_pinky_abduction",  "l_pinky_proximal",   "l_pinky_middle",  "l_pinky_distal" )

human_finger_list ( "l_thumb_finger", "l_index_finger", "l_middle_finger", "l_ring_finger", "l_little_finger")

hand_link           l_hand

wearable_data_ports ("/WearableData/HapticGlove/LeftHand/data:o")

wearable_data_actuator_ports_out "/WearableData/HapticGlove/LeftHand/Actuators/input:o"

wearable_data_actuator_ports_in "/WearableData/HapticGlove/LeftHand/Actuators/input:i"

# delta on human finger joint motion range
motion_range_min_delta  (   ( "l_thumb_oppose" ,  -30) )

###############
### RETARGETING
###############

motorsJointsCoupled      1

# motion retargetin
# motion retargetin
robot_to_human_map              ( ("l_thumb_oppose",    "l_thumb_oppose")
                                  ("l_thumb_proximal",  "l_thumb_proximal")
                                  ("l_thumb_distal",    "l_thumb_distal" )
                                  ("l_thumb_middle",    "l_thumb_middle" )
                                  ("l_index_proximal",  "l_index_proximal")
                                  ("l_index_distal",    "l_index_distal")
                                  ("l_index_middle",    "l_index_middle")
                                  ("l_middle_proximal", "l_middle_proximal")
                                  ("l_middle_distal",   "l_middle_distal")
                                  ("l_middle_middle",   "l_middle_middle")
                                  ("l_ring_proximal", "l_ring_proximal")
                                  ("l_ring_distal",   "l_ring_distal")
                                  ("l_ring_middle",   "l_ring_middle")
                                  ("l_pinky_proximal", "l_pinky_proximal")
                                  ("l_pinky_distal",   "l_pinky_distal")
                                  ("l_pinky_middle",   "l_pinky_middle") )

# haptic feedback retargeting from the robot axis groups to the human finger
l_thumb_finger                  ( "l_thumb_oppose", "l_thumb_proximal", "l_thumb_distal" )
l_index_finger                  ( "l_hand_finger", "l_index_proximal", "l_index_distal" )
l_middle_finger                 ( "l_middle_proximal", "l_middle_distal"  )
l_ring_finger                   (   "l_pinky" )
l_little_finger                 (   "l_pinky" )

# This gain is multiplied to the total error for each motor/axis to compute the force feedback to the user associated with each axis,
# defined according to user experience
# Number of gains = number of motors/axis
gainTotalError            ( 0.0 0.0 600.0     600.0 600.0 600.0      600.0 600.0 600.0 )

# check this issue for the velocity Gain: https://github.com/dic-iit/element_retargeting-from-human/issues/141
# number of gains = number of motors/axis
gainVelocityError         ( 0.0 0.0 0.1       0.1 0.1 0.1            0.1 0.1 0.1 )

# this value is multiplied to forcefeedback and provides haptic feedback to the user
gainVibrotactile          ( 0.8 0.8 0.8 0.8 0.8 )

# scaling and biased values for maping the human to robot motion
# the sign of the following vector is important, while the absolute values will be found at configuration file
human_to_robot_joint_angles_scaling (  -1.0 1.0 1.0 1.0
                                        1.0 1.0 1.0 1.0
                                        1.0 1.0 1.0
                                        -1.0 1.0 1.0 1.0
                                        -1.0 1.0 1.0 1.0 )

human_to_robot_joint_anlges_bias    (  0.0 0.0 0.0 0.0
                                       0.0 0.0 0.0 0.0
                                       0.0 0.0 0.0
                                       0.0 0.0 0.0 0.0
                                       0.0 0.0 0.0 0.0  )

axisContactThreshold                 0.1

##############################
### ROBOT CONTROL & ESTIMATION
##############################
useVelocity           0

referenceVelocityForPositionControl 100.0

# minimum and maximum values of the joints
# related to analog sensors
analog_joints_min_boundary ( 0.0 0.0 0.0     0.0 0.0 0.0     0.0 0.0 0.0     0.0 0.0 0.0     0.0 0.0 0.0  )
analog_joints_max_boundary ( 90.0 90.0 90.0  90.0 90.0 90.0  90.0 90.0 90.0  90.0 90.0 90.0  90.0 90.0 90.0 )

# hall sensors minimum and maximum values
analog_sensors_raw_min_boundary ( 255.0 230.0 255.0   242.0 235.0 240.0    254.0 237.0 240.0     255.0 240.0 245.0    255.0 240.0 235.0  )
analog_sensors_raw_max_boundary ( 2.0 12.0 0.0         12.0 0.0 12.0        23.0 38.0 8.0         13.0 31.0 30.0       0.0 0.0 0.0  )


# in case each joint does not have independant motor to actuate, they are coupled
axesJointsCoupled     1

# in case a calibration phase necessary before starting teleoperating the robot,
# otherwise read the calibration matrix from the config file
doCalibration           1

#robot controller exponential filter gain
exponentialFilterGain           0.9

# q= A x m, where:
#       q (n,1) is the joint values
#       m (m,1) is the motors values
#       A (n,m) is the mapping from the motors values to the joint values
# CouplingMatrix = A : (n,m) matrix
CouplingMatrix          ( 1.1 0.0 0.0 0.0 0.0
                          0.0 1.0 1.0 0.0 0.0
                          0.0 0.0 1.0 0.0 0.0
                          0.0 0.0 0.0 0.0 1.0 )

# in the Quadratic optimizartion problem to compute the motor values from the joint values : xT Q X + uT R u
# q_matrix_joint_motor is a list that identifies the main diagonal values of matrix Q: (q x q) matrix;
# size of q: is the number of desired joints to control
# r_matrix_joint_motor is a list that identifies the main diagonal of matrix R: (m x m) matrix;
# size of m: is the number of desired motors to control

q_qp_control    ( 1.0 1.0 1.0 1.0     1.0 1.0 1.0 1.0      1.0 1.0 1.0     1.0 1.0 1.0 1.0     1.0 1.0 1.0 1.0 )

r_qp_control    ( 0.0 0.0 0.0     0.0 0.0 0.0     0.0 0.0 0.0 )


# in the Kalman filter problem to estimate the axis values, velocity and acceleration:
# q_matrix_kf is a list that identifies the main diagonal of matrix: E[ (w(t) -w_bar(t)) (w(t) -w_bar(t))^T ],
# size:  m*m positive matrix,  Dx(t)= Fx(t)+ Gw(t), the process noise */
# r_matrix_kf is a list that identifies the main diagonal of matrix: E[ v(t) v(t)^T ],
# size:  p*p positive matrix, Z(t)= Hx(t)+ v(t), the measurement noise
no_states_kf            3
no_measurement_kf       1
q_matrix_kf             ( 10.0 150.0 100000.0 )
r_matrix_kf             ( 0.0000001 )

#####################
## TACTILE SENSORS ##
#####################
## length of the tactile sensor port
noTactileSensors        192

## indices to read from the port for each finger
##                                     starting index <uint>   ending index <uint>   contact threshold   threshold multiplier   contact feedback gain   derivative threshold   threshold multiplier  gain derivative vibrotactile feedback
l_thumb_finger_tactile_info          ( 48                      59                    0.14                1.0                    200.0                   0.5                    3.0                   40.0)
l_index_finger_tactile_info          ( 0                       11                    0.14                1.0                    200.0                   0.5                    3.0                   40.0)
l_middle_finger_tactile_info         ( 12                      23                    0.14                1.0                    200.0                   0.5                    3.0                   40.0)
l_ring_finger_tactile_info           ( 24                      35                    0.14                1.0                    200.0                   0.5                    3.0                   40.0)
l_little_finger_tactile_info         ( 36                      47                    0.14                1.0                    200.0                   0.5                    3.0                   40.0)

# absolute vibrotactile feedback nonlinear function parameters
# 15.0 * std::log(2 * std::pow(x, 0.7) + 1) + 0.5 * std::pow(x, 1.1);
# reference to https://github.com/ami-iit/element_retargeting-from-human/issues/182#issuecomment-1000472012
absoluteVibrotactileFeedbackNonlinearFunctionParameters ( 15.0       2.0       0.7       1.0       0.5       1.1 )

# percentage dedicated to absolute skin data for providing the vibrotactile feedback
# the value is between [0,1]
# 0 : 0% absolute skin value for the vibrotactile feedback; 100% derivative skin value for the vibrotactile feedback
# 1 : 100% absolute skin value for the vibrotactile feedback; 0% derivative skin value for the vibrotactile feedback
absoluteSkinValuePercentage 1.0
skinDerivativeSmoothingGain 1.0
